{"version":3,"sources":["components/todos/TodoItem.js","components/todos/Todos.js","components/todos/AddTodo.js","components/layout/Header.js","App.js","serviceWorker.js","index.js"],"names":["btnStyle","background","color","border","padding","borderRadius","cursor","float","TodoItem","todo","index","onHandleDelete","onHandleComplete","style","borderBottom","textDecoration","completed","type","checked","onChange","bind","this","title","onClick","Todos","todos","Object","keys","map","key","AddTodo","onAddTodo","useState","setTitle","onSubmit","e","preventDefault","display","name","flex","placeholder","value","target","className","headerStyle","textAlign","Header","startingState","id","uuidv4","App","setTodos","newTodo","newTodos","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3bdac204.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nfunction TodoItem({ todo, index, onHandleDelete, onHandleComplete }) {\r\n    const getStyle = () => {\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: todo.completed ?\r\n                'line-through' : 'none'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={getStyle()}>\r\n\r\n            <p>\r\n                <input type='checkbox' checked={todo.completed} onChange={onHandleComplete.bind(this, index)} /> {' '}\r\n                {todo.title}\r\n                <button onClick={onHandleDelete.bind(this, index)} style={btnStyle}>X</button>\r\n            </p>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n// PropTypes\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired\r\n}\r\n\r\nconst btnStyle = {\r\n    background: '#af3000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 9px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction Todos({ todos, onHandleDelete, onHandleComplete }) {\r\n    \r\n    // console.log(todos[0].title)\r\n    return Object.keys(todos).map(key =>\r\n        <TodoItem todo={todos[key]} key={key} index={key} onHandleDelete={onHandleDelete} onHandleComplete={onHandleComplete} />\r\n    );\r\n}\r\n\r\n\r\n// PropTypes\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Todos;\r\n","import React from 'react'\r\nimport { useState } from 'react'\r\n\r\n\r\nfunction AddTodo({onAddTodo}) {\r\n    const [title, setTitle] = useState('');\r\n\r\n    const handleChange = e => setTitle(e.target.value);\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        onAddTodo(title);\r\n        setTitle('');\r\n    }\r\n\r\n    return (\r\n        <form\r\n            onSubmit={onSubmit}\r\n            style={{ display: 'flex' }}>\r\n            <input\r\n                type='text'\r\n                name='title'\r\n                style={{ flex: '10', padding: '5px' }}\r\n                placeholder='Add Todo ..'\r\n                value={title}\r\n                onChange={handleChange}\r\n            />\r\n            <input\r\n                type='submit'\r\n                value='submit'\r\n                className='btn'\r\n                style={{ flex: '1' }}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react'\r\n\r\nfunction Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>TodoList</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\nexport default Header\r\n\r\n","import React from 'react';\nimport { useState } from 'react';\nimport Todos from './components/todos/Todos';\nimport AddTodo from './components/todos/AddTodo';\nimport Header from './components/layout/Header';\n\nimport{v4 as uuidv4} from 'uuid';\n\n\nimport './App.css';\n\nconst startingState = [\n  {\n    id: uuidv4(),\n    title: 'Go shopping',\n    completed: false\n  },\n  {\n    id: uuidv4(),\n    title: 'Cook Dinner',\n    completed: true\n  },\n  {\n    id: uuidv4(),\n    title: 'Read a book',\n    completed: false\n  },\n  {\n    id: uuidv4(),\n    title: 'Practice React',\n    completed: true\n  }\n];\n\nfunction App() {\n\n  const [todos, setTodos] = useState(startingState);\n\n\n  const handleDelete = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  }\n\n  const handleComplete = index => {\n    const newTodos = [...todos];\n    newTodos[index].completed = !newTodos[index].completed;\n    setTodos(newTodos);\n  }\n\n  const handleAdd = title => {\n    const newTodo = {\n      id: uuidv4(),\n      title: title,\n      completed: false\n    }\n    setTodos([...todos, newTodo]);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <div className='container'>\n        <Header />\n        <AddTodo onAddTodo={handleAdd} />\n        <Todos todos={todos} onHandleComplete={handleComplete} onHandleDelete={handleDelete} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}